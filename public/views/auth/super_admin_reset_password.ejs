<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Reset Super Admin Password</title>
  <link rel="stylesheet" href="/assets/dashboard/fonts/google_icon/google_icons.css" />
  <link rel="stylesheet" href="/assets/dashboard/styles/login/login.css" />
  <script src="/assets/dashboard/js/plugins/axios.js"></script>
  <script src="/assets/dashboard/js/plugins/sweetalert.js"></script>
</head>

<body>
  <div class="login_page">
    <div class="welcome-text">
      <h2>SUPER ADMIN PANEL</h2>
      <img width="150" height="150" src="/assets/dashboard/images/logo.png" alt="Logo" />
      <h2>SET NEW PASSWORD</h2>
    </div>
    <div id="reset-password">
      <div class="container">
        <div class="login_form">
          <div class="heading">
            <h2>Reset Your Password</h2>
          </div>
          <div class="bg1"></div>
          <div class="bg2"></div>
          <div class="bg3"></div>
          <div class="form_content">
            <form onsubmit="submitNewPassword()" autocomplete="off">
              <input type="hidden" name="token" id="token" value="<%= token %>" />
              
              <div class="form_group">
                <div class="input_body" style="display: flex; flex-direction: column; align-items: flex-start; gap: 4px;">
                  <div style="display: flex; align-items: center; gap: 8px; width: 100%;">
                    <span class="icon material-symbols-outlined">lock</span>
                    <label for="newPassword" style="margin: 0;">
                      <div class="text">New Password</div>
                    </label>
                  </div>
                  <div style="position: relative; width: 100%;">
                    <input type="password" placeholder="Enter new password" name="newPassword" id="newPassword" style="width: 100%; min-width: 0; padding-right: 36px; outline: none;" required />
                    <span id="toggleNewPassword" class="icon material-symbols-outlined" style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); cursor: pointer; user-select: none;">visibility</span>
                  </div>
                </div>
              </div>

              <div class="form_group">
                <div class="input_body" style="display: flex; flex-direction: column; align-items: flex-start; gap: 4px;">
                  <div style="display: flex; align-items: center; gap: 8px; width: 100%;">
                    <span class="icon material-symbols-outlined">lock_reset</span>
                    <label for="confirmPassword" style="margin: 0;">
                      <div class="text">Confirm New Password</div>
                    </label>
                  </div>
                   <div style="position: relative; width: 100%;">
                    <input type="password" placeholder="Confirm new password" name="confirmPassword" id="confirmPassword" style="width: 100%; min-width: 0; padding-right: 36px; outline: none;" required />
                    <span id="toggleConfirmPassword" class="icon material-symbols-outlined" style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); cursor: pointer; user-select: none;">visibility</span>
                  </div>
                </div>
              </div>

              <div class="form_group button_group">
                <div class="buttons" style="justify-content: center;">
                  <button type="submit" style="width: 100%;">
                    <div class="text">Reset Password</div>
                  </button>
                </div>
              </div>
               <div class="form_group" style="text-align: center; margin-top: 15px;">
                <a href="/super-admin/login" style="color: #007BFF; text-decoration: none; font-size: 0.9em;">Back to Login</a>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    function setupPasswordToggle(inputId, toggleId) {
      const passwordInput = document.getElementById(inputId);
      const togglePassword = document.getElementById(toggleId);
      if (passwordInput && togglePassword) {
        togglePassword.addEventListener('click', function () {
          const isPassword = passwordInput.type === 'password';
          passwordInput.type = isPassword ? 'text' : 'password';
          togglePassword.textContent = isPassword ? 'visibility_off' : 'visibility';
        });
      }
    }
    document.addEventListener('DOMContentLoaded', function () {
        setupPasswordToggle('newPassword', 'toggleNewPassword');
        setupPasswordToggle('confirmPassword', 'toggleConfirmPassword');
    });

    // Axios interceptors (similar to other auth pages)
    axios.interceptors.request.use(
      function (config) {
        document.querySelectorAll('.form_error').forEach((e) => e.remove());
        document.querySelectorAll('.form_group_error').forEach((e) => e.classList.remove('form_group_error'));
        return config;
      },
      function (error) {
        return Promise.reject(error);
      },
    );

    axios.interceptors.response.use(
      function (response) {
        return response;
      },
      function (error) {
        if (error.response && error.response.data) {
          if (error.response.data.status === 422 && error.response.data.data) { // Validation errors
            error.response.data.data.forEach((errorMsg) => {
              let el = document.querySelector(`[name="${errorMsg.path}"]`);
              if (el) {
                const formGroup = el.closest('.form_group');
                formGroup?.classList.add('form_group_error');
                formGroup?.insertAdjacentHTML('beforeend', `<div class="form_error">${errorMsg.msg}</div>`);
              } else {
                 // Generic message if path is not found or for general validation errors
                 window.toaster(errorMsg.msg || 'Validation error', 'error');
              }
            });
             if(!error.response.data.data.some(e => e.path)) { // If no specific path error, show main message
                window.toaster(error.response.data.message || 'Validation Error', 'error');
            }
          } else if (error.response.data.message) { // Other errors with a message
            window.toaster(error.response.data.message, 'error');
          } else {
            window.toaster('An unexpected error occurred.', 'error');
          }
        } else {
          window.toaster('An error occurred. Please try again.', 'error');
        }
        return Promise.reject(error);
      },
    );

    const submitNewPassword = () => {
      event.preventDefault();
      const form = event.currentTarget;
      const token = form.token.value;
      const newPassword = form.newPassword.value;
      const confirmPassword = form.confirmPassword.value;

      if (!newPassword || !confirmPassword) {
        window.toaster('Please fill in both password fields.', 'warning');
        return;
      }
      if (newPassword !== confirmPassword) {
        window.toaster('Passwords do not match.', 'error');
        // Optionally add error class to confirmPassword field
        const confirmPassField = document.getElementById('confirmPassword');
        const formGroup = confirmPassField.closest('.form_group');
        formGroup?.classList.add('form_group_error');
        formGroup?.insertAdjacentHTML('beforeend', `<div class="form_error">Passwords do not match.</div>`);
        return;
      }
      // Basic password length (optional, can add more complex rules)
      if (newPassword.length < 6) {
        window.toaster('Password must be at least 6 characters long.', 'error');
         const newPassField = document.getElementById('newPassword');
        const formGroup = newPassField.closest('.form_group');
        formGroup?.classList.add('form_group_error');
        formGroup?.insertAdjacentHTML('beforeend', `<div class="form_error">Password must be at least 6 characters long.</div>`);
        return;
      }

      axios.post('/api/v1/auth/super-admin/reset-password', {
          token,
          newPassword,
          confirmPassword,
        })
        .then((res) => {
          window.toaster(res.data.message || 'Password reset successfully! Redirecting to login...', 'success');
          setTimeout(() => {
            window.location.href = '/super-admin/login';
          }, 2000);
        })
        .catch((err) => {
          console.error(err);
          // Error display is handled by the interceptor
        });
    };
  </script>
</body>
</html>
